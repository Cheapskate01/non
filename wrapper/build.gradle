import groovy.json.*

def APP_NAME = "$System.env.APP_NAME"
def ANDROID_HOME = "$System.env.ANDROID_HOME"
def cfgf = file("../project/non.cfg")
if (cfgf.exists()) {
    def cfg = new JsonSlurper().parseText(cfgf.text)
    APP_NAME = cfg.title
    ANDROID_HOME = cfg.sdk
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.5'
        classpath 'com.android.tools.build:gradle:0.13+'
        classpath 'org.robovm:robovm-gradle-plugin:1.0.0-alpha-04'
    }
}

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"
    version = '1.0'
    
    ext {
        appName = APP_NAME
        sdkDir = ANDROID_HOME
        gdxVersion = '1.4.1'
        roboVMVersion = '1.0.0-alpha-04'
        box2DLightsVersion = '1.3'
        ashleyVersion = '1.3.1'
        aiVersion = '1.4.0'
        rhinoVersion = '1.7R4'
        jrubyVersion = '1.7.16.1'
        jythonVersion = '2.5.3'
        groovyVersion = '2.3.7'
        luajVersion = '3.0'
        bsfVersion = '3.1.3'
        reflectionsVersion = '0.9.9'
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}

project(":desktop") {
    apply plugin: "java"
    
    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-controllers-desktop:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-platform:$gdxVersion:natives-desktop"
        compile "org.jruby:jruby-complete:$jrubyVersion"
        compile "org.python:jython-standalone:$jythonVersion"
        compile "org.mozilla:rhino:$rhinoVersion"
        compile "org.codehaus.groovy:groovy-all:$groovyVersion"
        compile "org.luaj:luaj-jse:$luajVersion"
    }
}

project(":android") {
    apply plugin: "android"
    
    configurations { natives }

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
        compile "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-android:$gdxVersion"
        compile "org.jruby:jruby-complete:$jrubyVersion"
        compile "org.python:jython-standalone:$jythonVersion"
        compile "org.mozilla:rhino:$rhinoVersion"
        compile "org.codehaus.groovy:groovy-all:$groovyVersion"
        compile "org.luaj:luaj-jse:$luajVersion"
    }
}

project(":ios") {
    apply plugin: "java"
    apply plugin: "robovm"
    
    configurations { natives }

    dependencies {
        compile project(":core")
        compile "org.robovm:robovm-rt:${roboVMVersion}"
        compile "org.robovm:robovm-cocoatouch:${roboVMVersion}"
        compile "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-ios"
        compile "org.jruby:jruby-complete:$jrubyVersion"
        compile "org.python:jython-standalone:$jythonVersion"
        compile "org.mozilla:rhino:$rhinoVersion"
        compile "org.codehaus.groovy:groovy-all:$groovyVersion"
        compile "org.luaj:luaj-jse:$luajVersion"
    }
}

project(":html") {
    apply plugin: "gwt"
    apply plugin: "war"
    
    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-box2d-gwt:$gdxVersion:sources"
        compile "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion:sources"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-controllers-gwt:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-gwt:$gdxVersion:sources"
        compile "org.jruby:jruby-complete:$jrubyVersion"
        compile "org.python:jython-standalone:$jythonVersion"
        compile "org.mozilla:rhino:$rhinoVersion"
        compile "org.codehaus.groovy:groovy-all:$groovyVersion"
        compile "org.luaj:luaj-jse:$luajVersion"
    }
}

project(":core") {
    apply plugin: "java"

    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        compile "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
        compile "org.jruby:jruby-complete:$jrubyVersion"
        compile "org.python:jython-standalone:$jythonVersion"
        compile "org.mozilla:rhino:$rhinoVersion"
        compile "org.codehaus.groovy:groovy-all:$groovyVersion"
        compile "org.luaj:luaj-jse:$luajVersion"
        compile "com.wu-man:android-bsf-api:$bsfVersion"
        compile "org.reflections:reflections:$reflectionsVersion"
    }
}

task gen << {
    def lang = "js"
    if (project.hasProperty('arg')) { lang = arg }
    def mainClass = "main.$lang"
    def map = [ 
        title: 'non',
        main: mainClass,
        resolution: [800, 600],
        sdk: ANDROID_HOME
    ]
    def builder = new JsonBuilder(map)
    file("../project").mkdir()
    def ncfg = new File("../project/non.cfg")
    ncfg.createNewFile()
    ncfg.write(builder.toString())
    copy {
        from "gen"
        into "../project"
        include mainClass
        include "**/*.png"
    }
}

task update << {
    println "Building data..."
    copy {
        from "../project"
        into "android/assets"
        exclude "icon-16.png"
        exclude "icon-32.png"
        exclude "icon-64.png"
        exclude "icon-192.png"
        exclude "icon-256.png"
        exclude "loading.png"
        exclude "icon-48.png"
        exclude "icon-57.png"
        exclude "icon-72.png"
        exclude "icon-96.png"
        exclude "icon-114.png"
        exclude "icon-144.png"
        exclude "splash-320x480"
        exclude "splash-640x960"
        exclude "splash-640x1136"
        exclude "splash-750x1334"
        exclude "splash-768x1004"
        exclude "splash-1242x2208"
        exclude "splash-1536x2008"
        exclude ".DS_Store"
        exclude "Thumbs.db"
    }
}

gradle.projectsEvaluated {
    println "Loading plugins..."
    copy {
        from "../plugins"
        into "core/src/com/codeindie/non/plugins"
    }
}

tasks.eclipse.doLast {
    delete ".project"
}
