def f = file("../project/non.cfg")

if (f.exists()) {
    ext.cfg = new groovy.json.JsonSlurper().parseText(f.text)
} else {
    ext.cfg = new groovy.json.JsonSlurper().parseText('{ "name":"non", "version":"1.0.0" }')
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.5'
        classpath 'com.android.tools.build:gradle:0.13+'
        classpath 'org.robovm:robovm-gradle-plugin:1.0.0-alpha-04'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.+'
    }
}

allprojects {
    version = cfg.version
    
    ext {
        cfg = cfg
        appName = cfg.name
        gdxVersion = '1.4.1'
        roboVMVersion = '1.0.0-alpha-04'
        box2DLightsVersion = '1.3'
        rhinoVersion = '1.7R4'
        luajVersion = '3.0'
        kryonetVersion = '2.22.0-RC1'
        niftyVersion = '1.4.1-SNAPSHOT'
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}

project(":desktop") {
    apply plugin: "java"
    
    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-controllers-desktop:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-platform:$gdxVersion:natives-desktop"

        try { for(dep in cfg.desktop.libraries) compile dep } catch(e) { }
        try { for(dep in cfg.desktop.natives) compile dep } catch(e) { }
    }
}

project(":android") {
    apply plugin: 'android-sdk-manager'
    apply plugin: "android"
    
    configurations { natives }

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
        compile "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-android:$gdxVersion"

        try { for(dep in cfg.android.libraries) compile dep } catch(e) { }
        try { for(dep in cfg.android.natives) natives dep } catch(e) { }
    }
}

project(":ios") {
    apply plugin: "java"
    apply plugin: "robovm"
    
    configurations { natives }

    dependencies {
        compile project(":core")
        compile "org.robovm:robovm-rt:${roboVMVersion}"
        compile "org.robovm:robovm-cocoatouch:${roboVMVersion}"
        compile "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-ios"

        try { for(dep in cfg.ios.libraries) compile dep } catch(e) { }
        try { for(dep in cfg.ios.natives) natives dep } catch(e) { }
    }
}

project(":core") {
    apply plugin: "java"

    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        compile "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
        compile "org.mozilla:rhino:$rhinoVersion"
        compile "org.luaj:luaj-jse:$luajVersion"
        compile "com.esotericsoftware:kryonet:$kryonetVersion"

        try { for(dep in cfg.libraries) compile dep } catch(e) { }
        try { for(dep in cfg.natives) compile dep } catch(e) { }
    }
}

task update << {
    copy {
        from "../languages"
        into "core/src/non/languages"
        include "**/*.java"
    }
    
    copy {
        from "../plugins"
        into "core/src/non/plugins"
        include "**/*.java"
    }
    
    def text = "package non.plugins.internal; import non.plugins.*; public class _init { static { new non(); "
    try { for(plug in cfg.plugins) text += "new ${plug}(); " } catch(e) { }
    text += "} }"
        
    def ninit = new File("core/src/non/plugins/internal/_init.java")
    ninit.createNewFile()
    ninit.write(text)
	
    def src = "../project/res"
    def res = "gen/res"
    def out = "android/assets/res"
    
    def files = [ "loading", "loading_bg", "loading_bar", "loading_bar_bg" ]
    
    for(fl in files) {
        if (file("${src}/${fl}.png").exists()) {
            copy {
                from src
                into out
                include "${fl}.png"
            }
        } else {
            copy {
                from res
                into out
                include "${fl}.png"
            }
        }
    }
    
    copy {
        from "../project"
        into "android/assets"
        exclude "res/icon-16.png"
        exclude "res/icon-32.png"
        exclude "res/icon-64.png"
        exclude "res/icon-192.png"
        exclude "res/icon-256.png"
        exclude "res/icon-48.png"
        exclude "res/icon-57.png"
        exclude "res/icon-72.png"
        exclude "res/icon-96.png"
        exclude "res/icon-114.png"
        exclude "res/icon-144.png"
        exclude "res/splash-320x480"
        exclude "res/splash-640x960"
        exclude "res/splash-640x1136"
        exclude "res/splash-750x1334"
        exclude "res/splash-768x1004"
        exclude "res/splash-1242x2208"
        exclude "res/splash-1536x2008"
        exclude "**/*.DS_Store"
        exclude "**/*Thumbs.db"
    }
}