android {
    buildToolsVersion "20.0.0"
    compileSdkVersion 21
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        instrumentTest.setRoot('tests')
    }
    
    try {
        signingConfigs {
            releaseSigning {
                storeFile file(cfg.android.configuration.signing[0])
                storePassword cfg.android.configuration.signing[1]
                keyAlias cfg.android.configuration.signing[2]
                keyPassword cfg.android.configuration.signing[3]
            }
        }
        
        buildTypes {
            release {
                signingConfig signingConfigs.releaseSigning
            }
        }
    } catch(e) { }
}

tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
    pkgTask.jniFolders = new HashSet<File>()
    pkgTask.jniFolders.add(new File(projectDir, 'libs'))
}

task copyAndroidNatives << { 
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if(jar.name.endsWith("natives-android.jar")) outputDir = file("libs")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "**/*.so"
            }
        }
    }
}

task run(type: Exec) << {
    def adb = sdkDir + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.codeindie.non.android/com.codeindie.non.android.AndroidLauncher'
}

task dist(dependsOn: [assembleRelease]) << {
    file("../../dist/android").mkdirs()
    copy {
        from "build/outputs/apk"
        into "../../dist/android"
        include "android-release.apk"
        rename "android-release.apk", "${appName}-${version}.apk"
    }
    println "You can find ${appName}-${version}.apk in /dist/android"
}

task update(dependsOn: [':update', copyAndroidNatives]) << {
    println "Building android assets..."
    copy {
        file("res/drawable-mdpi").mkdirs()
        from "../../project/res"
        into "."
        include "icon-512.png"
        rename "icon-512.png", "ic_launcher-web.png"
    }
    copy {
        file("res/drawable-mdpi").mkdirs()
        from "../../project/res"
        into "res/drawable-mdpi"
        include "icon-48.png"
        rename "icon-48.png", "ic_launcher.png"
    }
    copy {
        file("res/drawable-hdpi").mkdirs()
        from "../../project/res"
        into "res/drawable-hdpi"
        include "icon-72.png"
        rename "icon-72.png", "ic_launcher.png"
    }
    copy {
        file("res/drawable-xhdpi").mkdirs()
        from "../../project/res"
        into "res/drawable-xhdpi"
        include "icon-96.png"
        rename "icon-96.png", "ic_launcher.png"
    }
    copy {
        file("res/drawable-xxhdpi").mkdirs()
        from "../../project/res"
        into "res/drawable-xxhdpi"
        include "icon-144.png"
        rename "icon-144.png", "ic_launcher.png"
    }
    copy {
        from "../../project/res"
        into "."
        include "icon-512.png"
        rename "icon-512.png", "ic_launcher-web.png"
    }
}